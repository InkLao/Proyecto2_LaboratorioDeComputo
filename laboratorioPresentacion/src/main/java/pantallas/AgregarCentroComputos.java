/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pantallas;

import NegocioException.NegocioException;
import dto.CentroComputoDTO;
import dto.UnidadAcademicaDTO;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import negocio.IAlumnoNegocio;
import negocio.ICarreraNegocio;
import negocio.ICentroComputoNegocio;
import negocio.IUnidadNegocio;

/**
 *
 * @author eduar
 */
public class AgregarCentroComputos extends javax.swing.JFrame {
    
    private GestionCentroComputos gcp;
    private IAlumnoNegocio alumnoNegocio;
    private ICarreraNegocio carreraNegocio;
    private IUnidadNegocio unidadNegocio;
    private ICentroComputoNegocio centroComputoNegocio;
    
    private Map<String, Integer> unidadMap;

    /**
     * Creates new form AgregarCentroComputos
     */
    public AgregarCentroComputos(GestionCentroComputos gcp, IUnidadNegocio unidadNegocio, ICentroComputoNegocio centroComputoNegocio) {
        initComponents();
        this.gcp=gcp;
        this.unidadNegocio = unidadNegocio;
        this.centroComputoNegocio = centroComputoNegocio;
        this.unidadMap = new HashMap<>();
        
        // Cargar las unidades académicas
        try {
            cargarUnidadesAcademicas();
        } catch (NegocioException ex) {
            Logger.getLogger(AgregarCentroComputos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void cargarUnidadesAcademicas() throws NegocioException {
        List<UnidadAcademicaDTO> unidades = unidadNegocio.obtenerUnidadesDTO();
        cmbUnidad.removeAllItems();
        
        for (UnidadAcademicaDTO unidad : unidades) {
            String nombre = unidad.getNombre();
            long unidadId = unidad.getId();
            int a = (int) unidadId;
            
            cmbUnidad.addItem(nombre);
            unidadMap.put(nombre, a);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        btnRegresar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbUnidad = new javax.swing.JComboBox<>();
        timePickerHoraFinal = new com.github.lgooddatepicker.components.TimePicker();
        timePickerHoraInicio = new com.github.lgooddatepicker.components.TimePicker();
        jLabel6 = new javax.swing.JLabel();
        txtContraseñaMaestra = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.setBackground(new java.awt.Color(102, 255, 102));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jLabel1.setText("Agregar Centro Computo");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Hora Inicio:");

        jLabel4.setText("Hora final:");

        jLabel5.setText("Unidad académica:");

        timePickerHoraFinal.setBackground(new java.awt.Color(136, 201, 239));

        timePickerHoraInicio.setBackground(new java.awt.Color(136, 201, 239));

        jLabel6.setText("Contraseña maestra:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnRegresar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAgregar))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(timePickerHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(timePickerHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 1, Short.MAX_VALUE))
                                    .addComponent(txtContraseñaMaestra))))))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timePickerHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timePickerHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtContraseñaMaestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(btnAgregar))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        this.setVisible(false);
        gcp.setVisible(true);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            // Validar que todos los campos requeridos estén llenos
            if (txtNombre.getText().isEmpty() || timePickerHoraInicio.getTime() == null || timePickerHoraFinal.getTime() == null || txtContraseñaMaestra.getText().isEmpty() || cmbUnidad.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Obtener los datos del formulario
            String nombre = txtNombre.getText();
            Calendar horaInicio = Calendar.getInstance();
            horaInicio.set(Calendar.HOUR_OF_DAY, timePickerHoraInicio.getTime().getHour());
            horaInicio.set(Calendar.MINUTE, timePickerHoraInicio.getTime().getMinute());
            
            Calendar horaFinal = Calendar.getInstance();
            horaFinal.set(Calendar.HOUR_OF_DAY, timePickerHoraFinal.getTime().getHour());
            horaFinal.set(Calendar.MINUTE, timePickerHoraFinal.getTime().getMinute());
            
            String contraseñaMaestra = txtContraseñaMaestra.getText();

            // Obtener ID de la unidad seleccionada
            String unidadSeleccionada = (String) cmbUnidad.getSelectedItem();
            int unidadId = unidadMap.get(unidadSeleccionada);
            long a = (long) unidadId;
            UnidadAcademicaDTO unidadDTO = new UnidadAcademicaDTO(a, unidadSeleccionada);

            // Crear el DTO de Centro de Cómputo
            CentroComputoDTO nuevoCentro = new CentroComputoDTO(
                nombre,
                horaInicio,
                horaFinal,
                contraseñaMaestra,
                false,  // Asumimos que un nuevo centro no estará eliminado
                unidadDTO
            );

            // Llamar al negocio para agregar el centro
            centroComputoNegocio.agregarCentroComputo(nuevoCentro);
            JOptionPane.showMessageDialog(this, "Centro de cómputo agregado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Cerrar la ventana después de agregar
            this.dispose();
            gcp.cargarCentrosEnTabla();
            gcp.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al agregar el centro de cómputo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cmbUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private com.github.lgooddatepicker.components.TimePicker timePickerHoraFinal;
    private com.github.lgooddatepicker.components.TimePicker timePickerHoraInicio;
    private javax.swing.JTextField txtContraseñaMaestra;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
